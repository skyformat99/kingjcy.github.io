<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kingjcy Blog</title>
    <link>http://kingjcy.github.io/tags/restful/index.xml</link>
    <description>Recent content on kingjcy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <atom:link href="http://kingjcy.github.io/tags/restful/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>restful架构</title>
      <link>http://kingjcy.github.io/blog/2017/06/23/restful%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Fri, 23 Jun 2017 17:30:47 +0800</pubDate>
      
      <guid>http://kingjcy.github.io/blog/2017/06/23/restful%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;REST &amp;ndash; REpresentational State Transfer 直接翻译：表现层状态转移。&lt;/p&gt;

&lt;p&gt;经典定义：URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;REST描述的是在网络中client和server的一种交互形式；REST本身不实用，实用的是如何设计 RESTful API（REST风格的网络接口）；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Server提供的RESTful API中，URL中只使用名词来指定资源，原则上不使用动词。“资源”是REST架构或者说整个网络处理的核心。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用HTTP协议里的动词来实现资源的添加，修改，删除等操作。即通过HTTP动词来实现资源的状态扭转：GET    用来获取资源，POST  用来新建资源（也可以用于更新资源），PUT    用来更新资源，DELETE  用来删除资源。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Server和Client之间传递某资源的一个表现形式，比如用JSON，XML传输文本，或者用JPG，WebP传输图片等。当然还可以压缩HTTP传输时的数据（on-wire data compression）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;用 HTTP Status Code传递Server的状态信息。比如最常用的 200 表示成功，500 表示Server内部错误等。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要理解rest，需要先理解api，api就是接口，提供给外部进行互相交互的。那么现在了解rest，rest是一种架构风格，我们先来理解rest架构风格，这边需要web，web三个关键点：识别，表示，交互，对应的是URL识别资源，representation（html，xml）表示资源，通过协议（http）和资源进行交互，整合一下就是通过http协议和URL利用client／server models对资源进行CURD操作。&lt;/p&gt;

&lt;p&gt;我们提供restful类型的api有什么好处呢？因为rest有限制，可以是一个统一的规范。就具有通用性。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用客户/服务器模型。客户和服务器之间通过一个统一的接口来互相通讯。&lt;/li&gt;
&lt;li&gt;层次化的系统。在一个REST系统中，客户端并不会固定地与一个服务器打交道。&lt;/li&gt;
&lt;li&gt;无状态。在一个REST系统中，服务端并不会保存有关客户的任何状态。也就是说，客户端自身负责用户状态的维持，并在每次发送请求时都需要提供足够的信息。&lt;/li&gt;
&lt;li&gt;可缓存。REST系统需要能够恰当地缓存请求，以尽量减少服务端和客户端之间的信息传输，以提高性能。&lt;/li&gt;
&lt;li&gt;统一的接口。一个REST系统需要使用一个统一的接口来完成子系统之间以及服务与用户之间的交互。这使得REST系统中的各个子系统可以独自完成演化。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>