<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kingjcy Blog</title>
    <link>http://kingjcy.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml</link>
    <description>Recent content on kingjcy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <atom:link href="http://kingjcy.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>redis源码解析</title>
      <link>http://kingjcy.github.io/blog/2016/07/28/redis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 28 Jul 2016 15:39:45 +0800</pubDate>
      
      <guid>http://kingjcy.github.io/blog/2016/07/28/redis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;redis项目的源码一直是备受赞扬的，其规模小而功能强大以及一些巧妙的技巧，都注定了它是一个值得学习的项目，今天起，我开始阅读redis源码，redis是用c写成的，对于我来说还是比较适合的。但是对于一百多个文件，怎么下手比较好，上网参考了别人的源码解析，最终决定按以下模块顺序阅读：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;struct:（结构体）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;adlist.c 用于对list的定义，它是个双向链表结构&lt;/li&gt;
&lt;li&gt;dict.c 主要对于内存中的hash进行管理&lt;/li&gt;
&lt;li&gt;sds.c 用于对字符串的定义&lt;/li&gt;
&lt;li&gt;sparkline.c 一个拥有sample列表的序列&lt;/li&gt;
&lt;li&gt;t_hash.c hash在Server/Client中的应答操作。主要通过redisObject进行类型转换。&lt;/li&gt;
&lt;li&gt;t_list.c list在Server/Client中的应答操作。主要通过redisObject进行类型转换。&lt;/li&gt;
&lt;li&gt;t_set.c  set在Server/Client中的应答操作。主要通过redisObject进行类型转换。&lt;/li&gt;
&lt;li&gt;t_string.c string在Server/Client中的应答操作。主要通过redisObject进行类型转换。&lt;/li&gt;
&lt;li&gt;t_zset.c zset在Server/Client中的应答操作。主要通过redisObject进行类型转换。&lt;/li&gt;
&lt;li&gt;ziplist.c  ziplist是一个类似于list的存储对象。它的原理类似于zipmap。&lt;/li&gt;
&lt;li&gt;zipmap.c  zipmap是一个类似于hash的存储对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;data:（数据操作）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;aof.c 全称为append only file，作用就是记录每次的写操作,在遇到断电等问题时可以用它来恢复数据库状态。&lt;/li&gt;
&lt;li&gt;config.c 用于将配置文件redis.conf文件中的配置读取出来的属性通过程序放到server对象中。&lt;/li&gt;
&lt;li&gt;db.c对于Redis内存数据库的相关操作。&lt;/li&gt;
&lt;li&gt;multi.c用于事务处理操作。&lt;/li&gt;
&lt;li&gt;rdb.c  对于Redis本地数据库的相关操作，默认文件是dump.rdb（通过配置文件获得），包括的操作包括保存，移除，查询等等。&lt;/li&gt;
&lt;li&gt;replication.c 用于主从数据库的复制操作的实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;tool:（工具）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;bitops.c 位操作相关类&lt;/li&gt;
&lt;li&gt;debug.c 用于调试时使用&lt;/li&gt;
&lt;li&gt;endianconv.c 高低位转换，不同系统，高低位顺序不同&lt;/li&gt;
&lt;li&gt;help.h  辅助于命令的提示信息&lt;/li&gt;
&lt;li&gt;lzf_c.c 压缩算法系列&lt;/li&gt;
&lt;li&gt;lzf_d.c  压缩算法系列&lt;/li&gt;
&lt;li&gt;rand.c 用于产生随机数&lt;/li&gt;
&lt;li&gt;release.c 用于发步时使用&lt;/li&gt;
&lt;li&gt;sha1.c sha加密算法的实现&lt;/li&gt;
&lt;li&gt;util.c  通用工具方法&lt;/li&gt;
&lt;li&gt;crc64.c 循环冗余校验&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;event:（事件）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ae.c 用于Redis的事件处理，包括句柄事件和超时事件。&lt;/li&gt;
&lt;li&gt;ae_epoll.c 实现了epoll系统调用的接口&lt;/li&gt;
&lt;li&gt;ae_evport.c 实现了evport系统调用的接口&lt;/li&gt;
&lt;li&gt;ae_kqueue.c 实现了kqueuex系统调用的接口&lt;/li&gt;
&lt;li&gt;ae_select.c 实现了select系统调用的接口&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;baseinfo:（基本信息）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;asciilogo,c redis的logo显示&lt;/li&gt;
&lt;li&gt;version.h定有Redis的版本号&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;compatible:（兼容）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fmacros.h 兼容Mac系统下的问题&lt;/li&gt;
&lt;li&gt;solarisfixes.h 兼容solary下的问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;main:（主程序）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;redis.c redis服务端程序&lt;/li&gt;
&lt;li&gt;redis_cli.c redis客户端程序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;net:（网络）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;anet.c 作为Server/Client通信的基础封装&lt;/li&gt;
&lt;li&gt;networking.c 网络协议传输方法定义相关的都放在这个文件里面了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wrapper:（封装类）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;bio.c background I/O的意思，开启后台线程用的&lt;/li&gt;
&lt;li&gt;hyperloglog.c 一种日志类型的&lt;/li&gt;
&lt;li&gt;intset.c  整数范围内的使用set，并包含相关set操作。&lt;/li&gt;
&lt;li&gt;latency.c 延迟类&lt;/li&gt;
&lt;li&gt;migrate.c 命令迁移类，包括命令的还原迁移等&lt;/li&gt;
&lt;li&gt;notify.c 通知类&lt;/li&gt;
&lt;li&gt;object.c  用于创建和释放redisObject对象&lt;/li&gt;
&lt;li&gt;pqsort.c  排序算法类&lt;/li&gt;
&lt;li&gt;pubsub.c 用于订阅模式的实现，有点类似于Client广播发送的方式。&lt;/li&gt;
&lt;li&gt;rio.c redis定义的一个I/O类&lt;/li&gt;
&lt;li&gt;slowlog.c 一种日志类型的，与hyperloglog.c类似&lt;/li&gt;
&lt;li&gt;sort.c 排序算法类，与pqsort.c使用的场景不同&lt;/li&gt;
&lt;li&gt;syncio.c 用于同步Socket和文件I/O操作。&lt;/li&gt;
&lt;li&gt;zmalloc.c 关于Redis的内存分配的封装实现&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;others:（存放了一些我暂时还不是很清楚的类,所以没有解释了）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scripting.c&lt;/li&gt;
&lt;li&gt;sentinel.c&lt;/li&gt;
&lt;li&gt;setproctitle.c&lt;/li&gt;
&lt;li&gt;valgrind.sh&lt;/li&gt;
&lt;li&gt;redisassert.h&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;test:（测试）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;memtest.c 内存检测&lt;/li&gt;
&lt;li&gt;redis_benchmark.c 用于redis性能测试的实现。&lt;/li&gt;
&lt;li&gt;redis_check_aof.c 用于更新日志检查的实现。&lt;/li&gt;
&lt;li&gt;redis_check_dump.c 用于本地数据库检查的实现。&lt;/li&gt;
&lt;li&gt;testhelp.c 一个C风格的小型测试框架。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些都是参考网上人家的阅读经验来的，去阅读吧！后续的源码解析直接放在我的github上[&lt;a href=&#34;https://github.com/kingjcy&#34;&gt;https://github.com/kingjcy&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;先看无关逻辑的结构体实现&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;链表adlist.c adlist.h&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;哈希dict.c dict.h&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字符串sds.c sds.h&lt;/p&gt;

&lt;p&gt;先定义字符串sds 其实就是char * 然后通过结构体sdshdr来完成对字符串的各种操作，其实就是string类型的c实现模式，其中的结构体成员就是对应的string的属性。其中用到goto清理内存，以及动态分配内存，指针的各种使用方法对应的c基础库函数的使用都值得学习。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;实现&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>