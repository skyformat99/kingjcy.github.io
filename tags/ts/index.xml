<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kingjcy Blog</title>
    <link>http://kingjcy.github.io/tags/ts/index.xml</link>
    <description>Recent content on kingjcy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <atom:link href="http://kingjcy.github.io/tags/ts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>typescript</title>
      <link>http://kingjcy.github.io/blog/2017/06/05/typescript/</link>
      <pubDate>Mon, 05 Jun 2017 15:11:46 +0800</pubDate>
      
      <guid>http://kingjcy.github.io/blog/2017/06/05/typescript/</guid>
      <description>&lt;p&gt;ts是js的一个超集。将ts编译成js，让js更加容易书写和表达。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tsc helloworld.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本语法&lt;/p&gt;

&lt;p&gt;基础类型&lt;/p&gt;

&lt;p&gt;布尔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let isDone: boolean = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数字:和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，Typescript还支持ECMAScript 2015中引入的二进制和八进制字面量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;
let binaryLiteral: number = 0b1010;
let octalLiteral: number = 0o744;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字符串:可以使用双引号（ &amp;ldquo;）或单引号（&amp;rsquo;）表示字符串。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let name: string = &amp;quot;bob&amp;quot;;

你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ `），并且以${ expr }这种形式嵌入表达式

let name: string = `Gene`;
let sentence: string = `Hello, my name is ${ name }.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. let list: number[] = [1, 2, 3];
2. let list: Array&amp;lt;number&amp;gt; = [1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元组 Tuple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare a tuple type
let x: [string, number];
// Initialize it
x = [&#39;hello&#39;, 10]; // OK
// Initialize it incorrectly
x = [10, &#39;hello&#39;]; // Error


当访问一个越界的元素，会使用联合类型替代：

x[3] = &#39;world&#39;; // OK, 字符串可以赋值给(string | number)类型

console.log(x[5].toString()); // OK, &#39;string&#39; 和 &#39;number&#39; 都有 toString

x[6] = true; // Error, 布尔不是(string | number)类型
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;枚举&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Color {Red, Green, Blue};
let c: Color = Color.Green
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值&lt;/p&gt;

&lt;p&gt;任意值：可以表示任何类型的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let notSure: any 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;空值&lt;/p&gt;

&lt;p&gt;声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null&lt;/p&gt;

&lt;p&gt;变量声明&lt;/p&gt;

&lt;p&gt;let和const是JavaScript里相对较新的变量声明方式。&lt;/p&gt;

&lt;p&gt;var是js中使用的变量声明的关键字，在作用域上会出现问题，所以在ts中使用let声明，const声明的变量不能改变。&lt;/p&gt;

&lt;p&gt;interface&lt;/p&gt;

&lt;p&gt;可选属性：&lt;/p&gt;

&lt;p&gt;带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。&lt;/p&gt;

&lt;p&gt;只读属性：&lt;/p&gt;

&lt;p&gt;一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:&lt;/p&gt;

&lt;p&gt;class&lt;/p&gt;

&lt;p&gt;继承&lt;/p&gt;

&lt;p&gt;我们使用 extends关键字来创建子类，有公共，私有与受保护的修饰符&lt;/p&gt;

&lt;p&gt;函数&lt;/p&gt;

&lt;p&gt;定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function add(x: number, y: number): number {
    return x + y;
}

let myAdd = function(x: number, y: number): number { return x+y; };

let myAdd: (x:number, y:number)=&amp;gt;number =
    function(x: number, y: number): number { return x+y; };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模块&lt;/p&gt;

&lt;p&gt;“内部模块”现在称做“命名空间”。 “外部模块”现在则简称为“模块”&lt;/p&gt;

&lt;p&gt;模块在其自身的作用域里执行，而不是在全局作用域里；这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用export形式之一导出它们。 相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用 import形式之一。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module X {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;export导出，同模块内，其实就是声明，因为定义在内部的，对于当前是不可见的。&lt;/p&gt;

&lt;p&gt;import 不同模块的需要导入。&lt;/p&gt;

&lt;p&gt;每个模块都有dafaul是默认导出的，设置标记后不需要专门导出。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default XXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若要导入一个使用了export =的模块时，必须使用TypeScript提供的特定语法import let = require(&amp;ldquo;module&amp;rdquo;)。&lt;/p&gt;

&lt;p&gt;要想描述非TypeScript编写的类库的类型，我们需要声明类库所暴露出的API。&lt;/p&gt;

&lt;p&gt;我们叫它声明因为它不是“外部程序”的具体实现。 它们通常是在 .d.ts文件里定义的。 如果你熟悉C/C++，你可以把它们当做 .h文件。&lt;/p&gt;

&lt;p&gt;在Node.js里大部分工作是通过加载一个或多个模块实现的。 我们可以使用顶级的 export声明来为每个模块都定义一个.d.ts文件，但最好还是写在一个大的.d.ts文件里。 我们使用与构造一个外部命名空间相似的方法，但是这里使用 module关键字并且把名字用引号括起来，方便之后import。 例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node.d.ts 
declare module &amp;quot;url&amp;quot; {
    export interface Url {
        protocol?: string;
        hostname?: string;
        pathname?: string;
    }

    export function parse(urlStr: string, parseQueryString?, slashesDenoteHost?): Url;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们可以/// &lt;reference&gt; node.d.ts并且使用import url = require(&amp;ldquo;url&amp;rdquo;);加载模块。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;reference path=&amp;quot;node.d.ts&amp;quot;/&amp;gt;
import * as URL from &amp;quot;url&amp;quot;;
let myUrl = URL.parse(&amp;quot;http://www.typescriptlang.org&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命名空间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;reference path=&amp;quot;../../includes.ts&amp;quot;/&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用标签指定它的命名空间，可以是一个命名空间分割成多个文件,也可以是多个命名空间，相当于引用模块&lt;/p&gt;

&lt;p&gt;装饰器
装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>