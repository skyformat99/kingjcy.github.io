<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kingjcy Blog</title>
    <link>http://kingjcy.github.io/tags/web/index.xml</link>
    <description>Recent content on kingjcy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <atom:link href="http://kingjcy.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>web</title>
      <link>http://kingjcy.github.io/blog/2017/06/01/web/</link>
      <pubDate>Thu, 01 Jun 2017 11:26:04 +0800</pubDate>
      
      <guid>http://kingjcy.github.io/blog/2017/06/01/web/</guid>
      <description>

&lt;p&gt;JavaScript web 开发人员必须学习的 3 门语言中的一门：
HTML 定义了网页的内容
CSS 描述了网页的布局
JavaScript 网页的行为&lt;/p&gt;

&lt;p&gt;前端归根到底是生成一个html文件来给浏览器渲染展示，js只不过增加来动态交互，什么mvc框架增加了开发便捷，简单实现。&lt;/p&gt;

&lt;h2 id=&#34;js&#34;&gt;js&lt;/h2&gt;

&lt;p&gt;JavaScript代码可以直接嵌在网页的任何地方,由&lt;script&gt;&amp;hellip;&lt;/script&gt;包含的代码就是JavaScript代码，它将直接被浏览器执行。&lt;/p&gt;

&lt;p&gt;第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过&lt;script src=&#34;...&#34;&gt;&lt;/script&gt;引入这个文件&lt;/p&gt;

&lt;p&gt;当然可以在chrom的开发者工具中开发js运行来当调试查看结果。&lt;/p&gt;

&lt;p&gt;基本语法：&lt;/p&gt;

&lt;p&gt;以；结尾，不加会自动补上,最好是加上，不然你一个语句写成两行会自动分成两个语句，这样就会出问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;number&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;123; // 整数123
0.456; // 浮点数0.456
1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
-99; // 负数
NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;字符串是以单引号&amp;rsquo;或双引号&amp;rdquo;括起来的任意文本&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 &lt;code&gt;...&lt;/code&gt; 表示&lt;/p&gt;

&lt;p&gt;要把多个字符串连接起来，可以用+号连接&lt;/p&gt;

&lt;p&gt;支持下标操作，支持length，toUpperCase，toLowerCase，indexOf，substring等函数。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运算符&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;JavaScript在设计时，有两种比较运算符：&lt;/p&gt;

&lt;p&gt;第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；&lt;/p&gt;

&lt;p&gt;第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。&lt;/p&gt;

&lt;p&gt;由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。&lt;/p&gt;

&lt;p&gt;另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：&lt;/p&gt;

&lt;p&gt;NaN === NaN; // false&lt;/p&gt;

&lt;p&gt;唯一能判断NaN的方法是通过isNaN()函数：&lt;/p&gt;

&lt;p&gt;isNaN(NaN); // true&lt;/p&gt;

&lt;p&gt;null表示一个“空”的值，它和0以及空字符串&amp;rdquo;不同，0是一个数值，&amp;rdquo;表示长度为0的字符串，而null表示“空”。&lt;/p&gt;

&lt;p&gt;还有一个和null类似的undefined，它表示“未定义”。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;JavaScript的数组可以包括任意数据类型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1, 2, 3.14, &#39;Hello&#39;, null, true];
arr[0]; // 返回索引为0的元素，即1
arr[5]; // 返回索引为5的元素，即true
arr[6]; // 索引超出了范围，返回undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接给Array的length赋一个新的值会导致Array大小的变化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [1, 2, 3];
arr.length; // 3
arr.length = 6;
arr; // arr变为[1, 2, 3, undefined, undefined, undefined]
arr.length = 2;
arr; // arr变为[1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array&lt;/p&gt;

&lt;p&gt;push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉&lt;/p&gt;

&lt;p&gt;与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置&lt;/p&gt;

&lt;p&gt;如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉&lt;/p&gt;

&lt;p&gt;sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序&lt;/p&gt;

&lt;p&gt;reverse()把整个Array的元素给掉个个，也就是反转&lt;/p&gt;

&lt;p&gt;splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [&#39;Microsoft&#39;, &#39;Apple&#39;, &#39;Yahoo&#39;, &#39;AOL&#39;, &#39;Excite&#39;, &#39;Oracle&#39;];
// 从索引2开始删除3个元素,然后再添加两个元素:
arr.splice(2, 3, &#39;Google&#39;, &#39;Facebook&#39;); // 返回删除的元素 [&#39;Yahoo&#39;, &#39;AOL&#39;, &#39;Excite&#39;]
arr; // [&#39;Microsoft&#39;, &#39;Apple&#39;, &#39;Google&#39;, &#39;Facebook&#39;, &#39;Oracle&#39;]
// 只删除,不添加:
arr.splice(2, 2); // [&#39;Google&#39;, &#39;Facebook&#39;]
arr; // [&#39;Microsoft&#39;, &#39;Apple&#39;, &#39;Oracle&#39;]
// 只添加,不删除:
arr.splice(2, 0, &#39;Google&#39;, &#39;Facebook&#39;); // 返回[],因为没有删除任何元素
arr; // [&#39;Microsoft&#39;, &#39;Apple&#39;, &#39;Google&#39;, &#39;Facebook&#39;, &#39;Oracle&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array&lt;/p&gt;

&lt;p&gt;join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var arr = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3];
arr.join(&#39;-&#39;); // &#39;A-B-C-1-2-3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;javaScript的对象是一组由键-值组成的无序集合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var person = {
    name: &#39;Bob&#39;,
    age: 20,
    tags: [&#39;js&#39;, &#39;web&#39;, &#39;mobile&#39;],
    city: &#39;Beijing&#39;,
    hasCar: true,
    zipcode: null
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var xiaoming = {
    name: &#39;小明&#39;
    };
    xiaoming.age; // undefined
    xiaoming.age = 18; // 新增一个age属性
    xiaoming.age; // 18
    delete xiaoming.age; // 删除age属性
    xiaoming.age; // undefined
    delete xiaoming[&#39;name&#39;]; // 删除name属性
    xiaoming.name; // undefined
    delete xiaoming.school; // 删除一个不存在的school属性也不会报错&#39;&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a; // 申明了变量a，此时a的值为undefined
var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1
var s_007 = &#39;007&#39;; // s_007是一个字符串
var Answer = true; // Answer是一个布尔值true
var t = null; // t的值是null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以隐式声明&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = 1；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;js是一种无类型、弱检测的语言，在函数中使用var关键字进行显式申明的变量是做为局部变量，而没有用var关键字，使用直接赋值方式声明的是全局变量。&lt;/p&gt;

&lt;p&gt;在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。&lt;/p&gt;

&lt;p&gt;JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。&lt;/p&gt;

&lt;p&gt;它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部&lt;/p&gt;

&lt;p&gt;不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;条件语句&lt;/p&gt;

&lt;p&gt;var age = 20;
if (age &amp;gt;= 18) { // 如果age &amp;gt;= 18为true，则执行if语句块
    alert(&amp;lsquo;adult&amp;rsquo;);
    } else { // 否则执行else语句块
        alert(&amp;lsquo;teenager&amp;rsquo;);
        }&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;循环语句&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;JavaScript的循环有两种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 0;
var i;
for (i=1; i&amp;lt;=10000; i++) {
    x = x + i;
    }
    x; // 50005000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 0;
var n = 99;
while (n &amp;gt; 0) {
    x = x + n;
    n = n - 2;
}
x; // 2500
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Map是一组键值对的结构，具有极快的查找速度&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var m = new Map([[&#39;Michael&#39;, 95], [&#39;Bob&#39;, 75], [&#39;Tracy&#39;, 85]]);
m.get(&#39;Michael&#39;); // 95


var m = new Map(); // 空Map
m.set(&#39;Adam&#39;, 67); // 添加新的key-value
m.set(&#39;Bob&#39;, 59);
m.has(&#39;Adam&#39;); // 是否存在key &#39;Adam&#39;: true
m.get(&#39;Adam&#39;); // 67
m.delete(&#39;Adam&#39;); // 删除key &#39;Adam&#39;
m.get(&#39;Adam&#39;); // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重复元素在Set中自动被过滤&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var s = new Set([1, 2, 3, 3, &#39;3&#39;]);
s; // Set {1, 2, 3, &amp;quot;3&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果,通过delete(key)方法可以删除元素&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;iterable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用for &amp;hellip; of循环遍历集合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];
var s = new Set([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]);
var m = new Map([[1, &#39;x&#39;], [2, &#39;y&#39;], [3, &#39;z&#39;]]);
for (var x of a) { // 遍历Array
    alert(x);
}
for (var x of s) { // 遍历Set
    alert(x);
}
for (var x of m) { // 遍历Map
    alert(x[0] + &#39;=&#39; + x[1]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.function functionName(arg0, arg1, ... argN) { statements }//function语句 
2.var function_name = new Function(arg1, arg2, ..., argN, function_body);//Function()构造函数 
3.var func = function(arg0, arg1, ... argN) { statements };//函数直接量
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用&lt;/p&gt;

&lt;p&gt;由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数&lt;/p&gt;

&lt;p&gt;JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function foo(x) {
    alert(x); // 10
    for (var i=0; i&amp;lt;arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用函数：map，reduce filter，sort&lt;/p&gt;

&lt;p&gt;JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。&lt;/p&gt;

&lt;p&gt;它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部&lt;/p&gt;

&lt;p&gt;不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性&lt;/p&gt;

&lt;p&gt;JavaScript 显示数据&lt;/p&gt;

&lt;p&gt;JavaScript 可以通过不同的方式来输出数据：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 window.alert() 弹出警告框。&lt;/p&gt;

&lt;p&gt;window.alert(5 + 6);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 document.write() 方法将内容写到 HTML 文档中。&lt;/p&gt;

&lt;p&gt;document.write(Date());&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 innerHTML 写入到 HTML 元素。&lt;/p&gt;

&lt;p&gt;document.getElementById(&amp;ldquo;demo&amp;rdquo;).innerHTML = &amp;ldquo;段落已修改。&amp;rdquo;;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 console.log() 写入到浏览器的控制台。&lt;/p&gt;

&lt;p&gt;console.log&amp;copy;;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（）
是运算符&lt;/p&gt;

&lt;p&gt;（表达式）则表达式的结果将会返回&lt;/p&gt;

&lt;p&gt;（function(){&amp;hellip;}）这样就返回了一个函数&lt;/p&gt;

&lt;p&gt;但是 当 （）和函数连接在一起的时候 则表示 函数运算&lt;/p&gt;

&lt;p&gt;（function(){&amp;hellip;}）()  一前一后2个括号 就是调用里面的函数让他执行&lt;/p&gt;

&lt;p&gt;var a=a||{};这种语法一般会在初始化的时候使用意思就是:假如a要是未定义或者null的时候就赋值一个{}空对象。&lt;/p&gt;

&lt;h2 id=&#34;ts&#34;&gt;ts&lt;/h2&gt;

&lt;p&gt;typescript就是用于将编程语言转化为js脚本语言的工具，但是它是在js基础上进行了向工程性语言的一种扩张，包含了类模板等面向对象的编程。高级语言编程，用tsc编译，编译结果不是可执行程序而是js文件，然后给html使用。&lt;/p&gt;

&lt;p&gt;基本语法类似于js，在其基础上有了扩张。&lt;/p&gt;

&lt;p&gt;具体可以参考另一篇博文ts入门。&lt;/p&gt;

&lt;h2 id=&#34;nodejs&#34;&gt;nodejs&lt;/h2&gt;

&lt;p&gt;Node.js，或者 Node，是一个可以让 JavaScript 运行在服务器端的平台。它可以让 JavaScript脱离浏览器的束缚运行在的服务器环境下，也就是起到了js后端开发的作用。&lt;/p&gt;

&lt;p&gt;JavaScript 为客户端而生，Node.js 为网络而生&lt;/p&gt;

&lt;p&gt;nodejs的包管理器npm提供很多第三方框架使用，加上模块使得它更加的适合于后台编程。&lt;/p&gt;

&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。
Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。
Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;

&lt;p&gt;安装&lt;/p&gt;

&lt;p&gt;正常可以直接下载二进制包运行，当然也可以下载nodejs源码包编译安装，时间比较长，安装与正常源码安装步骤一样。&lt;/p&gt;

&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。
Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。
Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;/p&gt;

&lt;p&gt;使用淘宝 NPM 镜像&lt;/p&gt;

&lt;p&gt;大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。
淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。
你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以使用 cnpm 命令来安装模块了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cnpm install [name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;npm init可以初始化一个npm项目。&lt;/p&gt;

&lt;h2 id=&#34;框架angularjs&#34;&gt;框架angularjs&lt;/h2&gt;

&lt;p&gt;AngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库&lt;/p&gt;

&lt;p&gt;它可通过 &lt;script&gt; 标签添加到 HTML 页面。
AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指令：AngularJS 指令是以 ng 作为前缀的 HTML 属性。&lt;/p&gt;

&lt;p&gt;ng-app 指令定义一个 AngularJS 应用程序。
ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
ng-bind 指令把应用程序数据绑定到 HTML 视图。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

 &amp;lt;div ng-app=&amp;quot;&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;名字 : &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
           &amp;lt;h1&amp;gt;Hello {{name}}&amp;lt;/h1&amp;gt;
           &amp;lt;/div&amp;gt;

            &amp;lt;/body&amp;gt;
            &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当网页加载完毕，AngularJS 自动开启。
ng-app 指令告诉 AngularJS，&lt;div&gt; 元素是 AngularJS 应用程序 的&amp;rdquo;所有者&amp;rdquo;。
ng-model 指令把输入域的值绑定到应用程序变量 name。
ng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。&lt;/p&gt;

&lt;p&gt;ng-init 指令初始化 AngularJS 应用程序变量。&lt;/p&gt;

&lt;p&gt;ng-click 指令告诉了 AngularJS HTML 元素被点击后需要执行的操作，ng-init初始化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button ng-click=&amp;quot;count = count + 1&amp;quot; ng-init=&amp;quot;count=0&amp;quot;&amp;gt;OK&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ng-hide 指令在表达式为 true 时隐藏 HTML 元素，ng-show显示，和hide相反。&lt;/p&gt;

&lt;p&gt;ng-href 指令覆盖了原生的 &lt;a&gt; 元素 href 属性。如果在 href 的值中有 AngularJS 代码，则需要使用 ng-href 而不是 href。ng-href 指令确保了链接是正常的，即使在 AngularJS 执行代码前点击链接。&lt;/p&gt;

&lt;p&gt;ng-if 指令用于在表达式为 false 时移除 HTML 元素。如果 if 语句执行的结果为 true，会添加移除元素，并显示。ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。&lt;/p&gt;

&lt;p&gt;ng-repeat 指令用于循环输出指定次数的 HTML 元素。ng-repeat 指令是通过数组来循环 HTML 代码来创建下拉列表，但 ng-options 指令更适合创建下拉列表，它有以下优势：
使用 ng-options 的选项的一个对象， ng-repeat 是一个字符串。ng-repeat 指令可以完美的显示表格。&lt;/p&gt;

&lt;p&gt;ngView 指令&lt;/p&gt;

&lt;p&gt;使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-view&amp;gt;&amp;lt;/div&amp;gt;
该 div 内的 HTML 内容会根据路由的变化而变化。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建自定义的指令&lt;/p&gt;

&lt;p&gt;除了 AngularJS 内置的指令外，我们还可以创建自定义指令。
你可以使用 .directive 函数来添加自定义的指令。
要调用自定义指令，HTML 元素上需要添加自定义指令名。
使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body ng-app=&amp;quot;myApp&amp;quot;&amp;gt;

&amp;lt;runoob-directive&amp;gt;&amp;lt;/runoob-directive&amp;gt;

&amp;lt;script&amp;gt;
var app = angular.module(&amp;quot;myApp&amp;quot;, []);
app.directive(&amp;quot;runoobDirective&amp;quot;, function() {
    return {
        template : &amp;quot;&amp;lt;h1&amp;gt;自定义指令!&amp;lt;/h1&amp;gt;&amp;quot;
    };
});
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AngularJS 表达式&lt;/p&gt;

&lt;p&gt;AngularJS 表达式写在双大括号内：{{ expression }}。
AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。
AngularJS 将在表达式书写的位置&amp;rdquo;输出&amp;rdquo;数据。
AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。
实例 {{ 5 + 5 }} 或 {{ firstName + &amp;ldquo; &amp;rdquo; + lastName }}&lt;/p&gt;

&lt;p&gt;AngularJS 模块（Module） 定义了 AngularJS 应用。
AngularJS 控制器（Controller） 用于控制 AngularJS 应用。
ng-app指令定义了应用, ng-controller 定义了控制器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;p&amp;gt;尝试修改以下表单。&amp;lt;/p&amp;gt;

&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controller=&amp;quot;myCtrl&amp;quot;&amp;gt;

名: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;firstName&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
姓: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;lastName&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
姓名: {{firstName + &amp;quot; &amp;quot; + lastName}}

&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var app = angular.module(&#39;myApp&#39;, []);      //angular的模块引用
app.controller(&#39;myCtrl&#39;, function($scope) { //angular的控制器引用
    $scope.firstName= &amp;quot;John&amp;quot;;
    $scope.lastName= &amp;quot;Doe&amp;quot;;
});
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AngularJS 控制器&lt;/p&gt;

&lt;p&gt;ng-controller 指令定义了应用程序控制器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div ng-app=&amp;quot;myApp&amp;quot; ng-controller=&amp;quot;myCtrl&amp;quot;&amp;gt;

名: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;firstName&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
姓: &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;lastName&amp;quot;&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;br&amp;gt;
姓名: {{firstName + &amp;quot; &amp;quot; + lastName}}

&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
var app = angular.module(&#39;myApp&#39;, []);
app.controller(&#39;myCtrl&#39;, function($scope) {
    $scope.firstName = &amp;quot;John&amp;quot;;
    $scope.lastName = &amp;quot;Doe&amp;quot;;
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AngularJS 应用程序由 ng-app 定义。应用程序在 &lt;div&gt; 内运行。&lt;/p&gt;

&lt;p&gt;ng-controller=&amp;ldquo;myCtrl&amp;rdquo; 属性是一个 AngularJS 指令。用于定义一个控制器。&lt;/p&gt;

&lt;p&gt;myCtrl 函数是一个 JavaScript 函数。&lt;/p&gt;

&lt;p&gt;AngularJS 使用$scope 对象来调用控制器。&lt;/p&gt;

&lt;p&gt;在 AngularJS 中， $scope 是一个应用对象(属于应用变量和函数)。&lt;/p&gt;

&lt;p&gt;控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。&lt;/p&gt;

&lt;p&gt;控制器在作用域中创建了两个属性 (firstName 和 lastName)。&lt;/p&gt;

&lt;p&gt;ng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。&lt;/p&gt;

&lt;p&gt;外部调用，既要降script写成js文件进行调用就好。&lt;/p&gt;

&lt;p&gt;AngularJS 的controller其实就是一个方法，它有三种写法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;pre name=&#34;code&#34; class=&#34;javascript&#34;&gt;var AppController = [&amp;lsquo;$scope&amp;rsquo;, function($scope){&lt;br /&gt;
     $scope.notifyServiceOnChage = function(){&lt;br /&gt;
     console.log($scope.windowHeight);&lt;br /&gt;
  };&lt;br /&gt;
}];&lt;br /&gt;
app.controller(&amp;lsquo;AppController&amp;rsquo;,AppController);&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在定义AppController的时候，先声明方法需要注入的参数，然后再定义方法体。最后将AppController绑定到app上。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;app.controller(&amp;lsquo;AppController&amp;rsquo;, function($scope){&lt;br /&gt;
    $scope.notifyServiceOnChage = function(){&lt;br /&gt;
     console.log($scope.windowHeight);&lt;br /&gt;
  };&lt;br /&gt;
})&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;直接在app的controller属性定义，首先是controller名字，然后是方法体。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接写方法，然后在ng-controller引用该方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;var app=angular.module(&amp;ldquo;myApp&amp;rdquo;,[]);
app.controller(&amp;ldquo;myController&amp;rdquo;,[&amp;lsquo;$scope&amp;rsquo;,&amp;lsquo;aService&amp;rsquo;,&amp;hellip;,function($scope,aService,&amp;hellip;){
    //可以注入你写的factory，provider等等
}]);&lt;/p&gt;

&lt;p&gt;controller第一个参数是名称，后面是一个数组，数组的前面是声明注入的内容，可以是n个，最后是个function，function的参数个数也必须是n个，必须跟前面声明注入的内容一一对应，这样实现了依赖注入。&lt;/p&gt;

&lt;p&gt;Scope(作用域)&lt;/p&gt;

&lt;p&gt;Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。
Scope 是一个对象，有可用的方法和属性。
Scope 可应用在视图和控制器上。&lt;/p&gt;

&lt;p&gt;根作用域
所有的应用都有一个 $rootScope，它可以作用在 ng-app 指令包含的所有 HTML 元素中。
$rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。&lt;/p&gt;

&lt;p&gt;AngularJS 过滤器&lt;/p&gt;

&lt;p&gt;过滤器可以使用一个管道字符（|）添加到表达式和指令中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;currency    格式化数字为货币格式。
filter  从数组项中选择一个子集。
lowercase   格式化字符串为小写。
orderBy 根据某个表达式排列数组。
uppercase   格式化字符串为大写。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义过滤器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = angular.module(&#39;myApp&#39;, []);
app.controller(&#39;myCtrl&#39;, function($scope) {
    $scope.msg = &amp;quot;Runoob&amp;quot;;
});
app.filter(&#39;reverse&#39;, function() { //可以注入依赖
    return function(text) {
        return text.split(&amp;quot;&amp;quot;).reverse().join(&amp;quot;&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;服务(Service)&lt;/p&gt;

&lt;p&gt;AngularJS 中你可以创建自己的服务，或使用内建服务。&lt;/p&gt;

&lt;p&gt;$location 服务，它可以返回当前页面的 URL 地址。&lt;/p&gt;

&lt;p&gt;$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。&lt;/p&gt;

&lt;p&gt;$timeout 服务对应了 JS window.setTimeout 函数&lt;/p&gt;

&lt;p&gt;$interval 服务对应了 JS window.setInterval 函数。&lt;/p&gt;

&lt;p&gt;创建自定义服务&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.service(&#39;hexafy&#39;, function() {
    this.myFunc = function (x) {
        return x.toString(16);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AngularJS 路由&lt;/p&gt;

&lt;p&gt;主要是使用 ngRoute 模块，引入angularjs的提供的模块js文件。&lt;/p&gt;

&lt;p&gt;访问&lt;a href=&#34;http://runoob.com/#/first&#34;&gt;http://runoob.com/#/first&lt;/a&gt; 向服务端请的地址都是一样的 (&lt;a href=&#34;http://runoob.com/)。#号之后的内容在向服务端请求时会被浏览器忽略掉。&#34;&gt;http://runoob.com/)。#号之后的内容在向服务端请求时会被浏览器忽略掉。&lt;/a&gt; 所以我们就需要在客户端实现 # 号后面内容的功能实现。 AngularJS 路由 就通过 # + 标记 帮助我们区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。&lt;/p&gt;

&lt;p&gt;AngularJS $routeProvider 用来定义路由规则。&lt;/p&gt;

&lt;p&gt;语法规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$routeProvider.when(url, {
    template: string,
    templateUrl: string,
    controller: string, function 或 array,
    controllerAs: string,
    redirectTo: string, function,
    resolve: object&amp;lt;key, function&amp;gt;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;template:&lt;/p&gt;

&lt;p&gt;如果我们只需要在 ng-view 中插入简单的 HTML 内容，则使用该参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.when(&#39;/computers&#39;,{template:&#39;这是电脑分类页面&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;templateUrl:&lt;/p&gt;

&lt;p&gt;如果我们只需要在 ng-view 中插入 HTML 模板文件，则使用该参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$routeProvider.when(&#39;/computers&#39;, {
    templateUrl: &#39;views/computers.html&#39;,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;controller:&lt;/p&gt;

&lt;p&gt;function、string或数组类型，在当前模板上执行的controller函数，生成新的scope。&lt;/p&gt;

&lt;p&gt;controllerAs:&lt;/p&gt;

&lt;p&gt;string类型，为controller指定别名。&lt;/p&gt;

&lt;p&gt;redirectTo:&lt;/p&gt;

&lt;p&gt;重定向的地址。&lt;/p&gt;

&lt;p&gt;resolve:&lt;/p&gt;

&lt;p&gt;指定当前controller所依赖的其他模块。&lt;/p&gt;

&lt;p&gt;AngularJS 依赖注入&lt;/p&gt;

&lt;p&gt;五种组件：&lt;/p&gt;

&lt;p&gt;value&lt;/p&gt;

&lt;p&gt;Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 定义一个模块
var mainApp = angular.module(&amp;quot;mainApp&amp;quot;, []);

// 创建 value 对象 &amp;quot;defaultInput&amp;quot; 并传递数据
mainApp.value(&amp;quot;defaultInput&amp;quot;, 5);

// 将 &amp;quot;defaultInput&amp;quot; 注入到控制器
mainApp.controller(&#39;CalcController&#39;, function($scope, CalcService, defaultInput) {
   $scope.number = defaultInput;
   $scope.result = CalcService.square($scope.number);

   $scope.square = function() {
      $scope.result = CalcService.square($scope.number);
   }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;factory&lt;/p&gt;

&lt;p&gt;通常我们使用 factory 函数来计算或返回值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 定义一个模块
var mainApp = angular.module(&amp;quot;mainApp&amp;quot;, []);

// 创建 factory &amp;quot;MathService&amp;quot; 用于两数的乘积 provides a method multiply to return multiplication of two numbers
mainApp.factory(&#39;MathService&#39;, function() {
   var factory = {};

   factory.multiply = function(a, b) {
      return a * b
   }
   return factory;
}); 

// 在 service 中注入 factory &amp;quot;MathService&amp;quot;
mainApp.service(&#39;CalcService&#39;, function(MathService){
   this.square = function(a) {
      return MathService.multiply(a,a);
   }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;service
provider&lt;/p&gt;

&lt;p&gt;AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。
Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。&lt;/p&gt;

&lt;p&gt;// 定义一个模块
var mainApp = angular.module(&amp;ldquo;mainApp&amp;rdquo;, []);
&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 使用 provider 创建 service 定义一个方法用于计算两数乘积
mainApp.config(function($provide) {
   $provide.provider(&#39;MathService&#39;, function() {
      this.$get = function() {
         var factory = {};  

         factory.multiply = function(a, b) {
            return a * b; 
         }
         return factory;
      };
   });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;constant&lt;/p&gt;

&lt;p&gt;constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。&lt;/p&gt;

&lt;p&gt;mainApp.constant(&amp;ldquo;configParam&amp;rdquo;, &amp;ldquo;constant value&amp;rdquo;);&lt;/p&gt;

&lt;h2 id=&#34;html&#34;&gt;html&lt;/h2&gt;

&lt;p&gt;超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。可以使用 HTML 来建立自己的 WEB 站点，HTML 运行在浏览器上，由浏览器来解析。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;页面标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;这是一个标题&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;这是一个段落。&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;这是另外一个段落。&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只有body部分会在浏览器上显示出来。&lt;/p&gt;

&lt;p&gt;属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTML 元素可以设置属性
属性可以在元素中添加附加信息
属性一般描述于开始标签
属性总是以名称/值对的形式出现，比如：name=&amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;  html5标准网页声明&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所有的HTML文档都应该有一个&lt;html&gt;标签，&lt;html&gt;标签可以包含两个部分:&lt;head&gt;和&lt;body&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;常用标签&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;font&gt; 改变字体，字号，文字颜色&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;font size=&amp;quot;6&amp;quot;&amp;gt;6&amp;lt;/font&amp;gt; 
&amp;lt;font size=&amp;quot;4&amp;quot;&amp;gt;4&amp;lt;/font&amp;gt; 
&amp;lt;font color=&amp;quot;red&amp;quot; size=&amp;quot;5&amp;quot;&amp;gt;红色的5&amp;lt;/font&amp;gt; 
&amp;lt;font face=&amp;quot;黑体&amp;quot;&amp;gt;黑体的字&amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加粗，下划线，斜体字也是常用的文字效果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;b&amp;gt;Bold&amp;lt;/b&amp;gt; 
&amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt; 
&amp;lt;u&amp;gt;underline&amp;lt;/u&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 这是一个注释 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标题的标签&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;,&amp;lt;h2&amp;gt;,&amp;lt;h3&amp;gt;,&amp;lt;h4&amp;gt;,&amp;lt;h5&amp;gt;,&amp;lt;h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;hr&gt;标签用于在页面上添加横线&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;hr width=&amp;quot;90%&amp;quot; color=&amp;quot;red&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img&gt;标签用于在页面上添加图片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;/Icons/valid-xhtml10&amp;quot; alt=&amp;quot;图片简介&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a&gt;链接，href属性指定了链接到的地址&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://deerchao.net&amp;quot;&amp;gt;Unibetter大学生论坛&amp;lt;/a&amp;gt; 
&amp;lt;a href=&amp;quot;http://validator.w3.org&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/Icons/valid-xhtml10&amp;quot; alt=&amp;quot;验证HTML&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分段与换行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是第一段。&amp;lt;/p&amp;gt; 
&amp;lt;p&amp;gt;这是第二段。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;标签专门用于标明不同的部分  块，可以用于布局。

    &lt;div&gt;页头内容&lt;/div&gt; &lt;div&gt;主体内容&lt;/div&gt; &lt;div&gt;页脚内容&lt;/div&gt;

&lt;p&gt;&lt;table&gt; 表示html表格。标签里通常会包含几个&lt;tr&gt;标签，&lt;tr&gt;代表表格里的一行。&lt;tr&gt;标签又会包含&lt;td&gt;标签，每个&lt;td&gt;代表一个单元格。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tr&amp;gt; 元素定义表格行，&amp;lt;th&amp;gt; 元素定义表头，&amp;lt;td&amp;gt; 元素定义表格单元
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html全局属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;accesskey   规定激活元素的快捷键。
class   规定元素的一个或多个类名（引用样式表中的类）。
contenteditable 规定元素内容是否可编辑。
contextmenu 规定元素的上下文菜单。上下文菜单在用户点击元素时显示。
data-*  用于存储页面或应用程序的私有定制数据。
dir 规定元素中内容的文本方向。
draggable   规定元素是否可拖动。
dropzone    规定在拖动被拖动数据时是否进行复制、移动或链接。
hidden  规定元素仍未或不再相关。
id  规定元素的唯一 id。
lang    规定元素内容的语言。
spellcheck  规定是否对元素进行拼写和语法检查。
style   规定元素的行内 CSS 样式。
tabindex    规定元素的 tab 键次序。
title   规定有关元素的额外信息。
translate   规定是否应该翻译元素内容。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;标签&lt;/p&gt;

&lt;p&gt;input   &lt;input&gt; 标签规定了用户可以在其中输入数据的输入字段。&lt;input&gt; 元素在 &lt;form&gt; 元素中使用，用来声明允许用户输入数据的 input 控件。输入字段可通过多种方式改变，取决于 type 属性。&lt;/p&gt;

&lt;p&gt;一个简单的 HTML 表单，包含两个文本输入框和一个提交按钮：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;form_action.asp&amp;quot; method=&amp;quot;get&amp;quot;&amp;gt;
First name: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;fname&amp;quot; /&amp;gt;
Last name: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;lname&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用属性：type 控件类型， name 控件名称 value 控件默认值&lt;/p&gt;

&lt;p&gt;br   换行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;使用 br 元素&amp;lt;br&amp;gt;在文本中&amp;lt;br&amp;gt;换行。

使用 br 元素
在文本中
换行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ul和li  无序 HTML 列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Coffee&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Tea&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Milk&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

Coffee
Tea
Milk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;script  用于定义客户端脚本,正常js&lt;/p&gt;

&lt;p&gt;a   标签定义超链接，用于从一个页面链接到另一个页面，最重要的属性是 href 属性，它指定链接的目标。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://www.runoob.com&amp;quot;&amp;gt;访问菜鸟教程!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;p  定义段落&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是一个段落。&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pre  可定义预格式化的文本。被包围在 &lt;pre&gt; 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。&lt;/p&gt;

&lt;p&gt;&lt;span&gt; 用于对文档中的行内元素进行操作，提供了一种将文本的一部分或者文档的一部分独立出来的方式。&lt;/p&gt;

&lt;p&gt;&lt;i&gt; 定义与文本中其余部分不同的部分，并把这部分文本呈现为斜体文本。&lt;/p&gt;

&lt;p&gt;dl,dt,dd   带有项目和描述的描述列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;Coffee&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;Black hot drink&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Milk&amp;lt;/dt&amp;gt;
    &amp;lt;dd&amp;gt;White cold drink&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;button&gt; 标签定义一个按钮。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;点我!&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;label   &lt;label&gt; 标签为 input 元素定义标注（标记）。&lt;/p&gt;

&lt;p&gt;head&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt; 元素是所有头部元素的容器。
&amp;lt;head&amp;gt; 元素必须包含文档的标题（title），可以包含脚本、样式、meta 信息 以及其他更多的信息。
以下列出的元素能被用在 &amp;lt;head&amp;gt; 元素内部：
&amp;lt;title&amp;gt; （在头部中，这个元素是必需的）定义HTML文档的标题
&amp;lt;style&amp;gt;
&amp;lt;base&amp;gt;    定义页面中所有链接默认的链接目标地址。
&amp;lt;link&amp;gt;
&amp;lt;meta&amp;gt;    描述HTML文档的描述，关键词，作者，字符集等
&amp;lt;script&amp;gt;
&amp;lt;noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;meta&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;元数据（Metadata）是数据的数据信息。
&amp;lt;meta&amp;gt; 标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。
META元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。
元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;link&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link&amp;gt; 标签定义文档与外部资源的关系。
&amp;lt;link&amp;gt; 标签最常见的用途是链接样式表。

&amp;lt;head&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;theme.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;sub&gt; 下标&lt;/sub&gt; 和 &lt;sup&gt; 上标&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;表单是一个包含表单元素的区域。
表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。
表单使用表单标签 &lt;form&gt; 来设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form&amp;gt;
.
input 元素
.
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>