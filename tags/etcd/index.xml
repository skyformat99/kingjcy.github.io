<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kingjcy Blog</title>
    <link>http://kingjcy.github.io/tags/etcd/index.xml</link>
    <description>Recent content on kingjcy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <atom:link href="http://kingjcy.github.io/tags/etcd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>etcd and flannel tutorials</title>
      <link>http://kingjcy.github.io/blog/2017/02/14/etcd-and-flannel-tutorials/</link>
      <pubDate>Tue, 14 Feb 2017 14:51:14 +0800</pubDate>
      
      <guid>http://kingjcy.github.io/blog/2017/02/14/etcd-and-flannel-tutorials/</guid>
      <description>&lt;p&gt;ETCD是用于共享配置和服务发现的分布式，一致性的KV存储系统。是一款类似于zk有望取代复杂的zk的用go语言开发的存储系统。&lt;/p&gt;

&lt;p&gt;flannel是一款针对kubernetes设计的网络规划服务，它的目的就是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;etcd&#34;&gt;etcd&lt;/h1&gt;

&lt;p&gt;etcd有着几方面的优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一致性协议： ETCD使用[Raft]协议， ZK使用ZAB（类PAXOS协议），前者容易理解，方便工程实现；&lt;/p&gt;

&lt;p&gt;etcd采用对是强一致性。&lt;/p&gt;

&lt;p&gt;一致性又可以分为强一致性与弱一致性。
强一致性可以理解为一致性又可以分为强一致性与弱一致性。
强一致性可以理解为在任意时刻，所有节点中的数据是一样的。同一时间点，你在节点A中获取到key1的值与在节点B中获取到key1的值应该都是一样的。
弱一致性包含很多种不同的实现，目前分布式系统中广泛实现的是最终一致性。
所谓最终一致性，就是不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。也可以简单的理解为在一段时间后，节点间的数据会最终达到一致状态。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;运维方面：ETCD方便运维，ZK难以运维；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;项目活跃度：ETCD社区与开发活跃，ZK已经快死了；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;API：ETCD提供HTTP+JSON, gRPC接口，跨平台跨语言，ZK需要使用其客户端；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;访问安全方面：ETCD支持HTTPS访问，ZK在这方面缺失；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;etcd的使用场景和zk相似&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置管理&lt;/li&gt;
&lt;li&gt;服务注册于发现&lt;/li&gt;
&lt;li&gt;选主&lt;/li&gt;
&lt;li&gt;应用调度&lt;/li&gt;
&lt;li&gt;分布式队列&lt;/li&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;安装比较简单，直接去开源的github上去下在压缩包，然后解压就有对应的可执行文件，可以将可执行文件etcd，etcdctl复制到/usr/bin下面使用&lt;/p&gt;

&lt;h2 id=&#34;集群部署&#34;&gt;集群部署&lt;/h2&gt;

&lt;p&gt;静态部署用命令直接启动&lt;/p&gt;

&lt;p&gt;node1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcd -name niub1 -debug \
-initial-advertise-peer-urls http://node1-ip:2380 \
-listen-peer-urls http://node1-ip:2380 \
-listen-client-urls http://node1-ip:2379,http://127.0.0.1:2379 \
-advertise-client-urls http://node1-ip:2379 \
-initial-cluster-token etcd-cluster-1 \
-initial-cluster niub1=http://node1-ip:2380,niub2=http://node2-ip:2380,niub3=http://node3-ip:2380 \
-initial-cluster-state new  &amp;gt;&amp;gt; ./etcd.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;node2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcd -name niub2 -debug \
-initial-advertise-peer-urls http://node2-ip:2380 \
-listen-peer-urls http://node2-ip:2380 \
-listen-client-urls http://node2-ip:2379,http://127.0.0.1:2379 \
-advertise-client-urls http://node2-ip:2379 \
-initial-cluster-token etcd-cluster-1 \
-initial-cluster niub1=http://node1-ip:2380,niub2=http://node2-ip:2380,niub3=http://node3-ip:2380 \
-initial-cluster-state new  &amp;gt;&amp;gt; ./etcd.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;node3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcd -name niub3 -debug \
-initial-advertise-peer-urls http://node3-ip:2380 \
-listen-peer-urls http://node3-ip:2380 \
-listen-client-urls http://node3-ip:2379,http://127.0.0.1:2379 \
-advertise-client-urls http://node3-ip:2379 \
-initial-cluster-token etcd-cluster-1 \
-initial-cluster niub1=http://node1-ip:2380,niub2=http://node2-ip:2380,niub3=http://node3-ip:2380 \
-initial-cluster-state new  &amp;gt;&amp;gt; ./etcd.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以检查一下对集群情况了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcdctl member list
curl http://10.10.0.14:2379/v2/members
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两种放肆都能返回三个节点的相关情况，也可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcdctl cluster-health
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样etcd的集群就搭建成功了。&lt;/p&gt;

&lt;p&gt;正常会将其加入到系统服务中，首先创建设置配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /etc/etcd/etcd.conf

# [member]
ETCD_NAME=&amp;quot;etcd-2&amp;quot;
ETCD_DATA_DIR=&amp;quot;/data/etcd/&amp;quot;
#ETCD_WAL_DIR=&amp;quot;&amp;quot;
#ETCD_SNAPSHOT_COUNT=&amp;quot;10000&amp;quot;
#ETCD_HEARTBEAT_INTERVAL=&amp;quot;100&amp;quot;
#ETCD_ELECTION_TIMEOUT=&amp;quot;1000&amp;quot;
#ETCD_LISTEN_PEER_URLS=&amp;quot;http://localhost:2380&amp;quot;
#ETCD_LISTEN_CLIENT_URLS=&amp;quot;http://localhost:2379&amp;quot;
ETCD_LISTEN_PEER_URLS=&amp;quot;http://0.0.0.0:7001&amp;quot;
ETCD_LISTEN_CLIENT_URLS=&amp;quot;http://0.0.0.0:4001&amp;quot;
#ETCD_MAX_SNAPSHOTS=&amp;quot;5&amp;quot;
#ETCD_MAX_WALS=&amp;quot;5&amp;quot;
#ETCD_CORS=&amp;quot;&amp;quot;
#
#[cluster]
#ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;http://localhost:2380&amp;quot;
ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;http://172.32.148.128:7001&amp;quot;
# if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &amp;quot;test=http://...&amp;quot;
#ETCD_INITIAL_CLUSTER=&amp;quot;default=http://localhost:2380&amp;quot;
ETCD_INITIAL_CLUSTER=&amp;quot;etcd-1=http://172.32.148.127:7001,etcd-2=http://172.32.148.128:7001,etcd-3=http://172.32.148.129:7001,etcd-4=http://172.32.148.130:7001&amp;quot;
ETCD_INITIAL_CLUSTER_STATE=&amp;quot;new&amp;quot;
#ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;etcd-cluster&amp;quot;
#ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;http://localhost:2379&amp;quot;
ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;http://172.32.148.128:4001&amp;quot;
#ETCD_DISCOVERY=&amp;quot;&amp;quot;
#ETCD_DISCOVERY_SRV=&amp;quot;&amp;quot;
#ETCD_DISCOVERY_FALLBACK=&amp;quot;proxy&amp;quot;
#ETCD_DISCOVERY_PROXY=&amp;quot;&amp;quot;
#ETCD_STRICT_RECONFIG_CHECK=&amp;quot;false&amp;quot;
#ETCD_AUTO_COMPACTION_RETENTION=&amp;quot;0&amp;quot;
.......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后增加开机启动配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat /uusr/lin/systemd/system/etcd.service

[Unit]
Description=Etcd Server
After=network.target
After=network-online.target
Wants=network-online.target

[Service]
Type=notify
WorkingDirectory=/var/lib/etcd/
EnvironmentFile=-/etc/etcd/etcd.conf
User=root
# set GOMAXPROCS to number of processors
#ExecStart=/bin/bash -c &amp;quot;GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\&amp;quot;${
ETCD_NAME}\&amp;quot; --data-dir=\&amp;quot;${
ETCD_DATA_DIR}\&amp;quot; --listen-client-urls=\&amp;quot;${
ETCD_LISTEN_CLIENT_URLS}\&amp;quot;&amp;quot;


ExecStart=/bin/bash -c &amp;quot;GOMAXPROCS=$(nproc) /usr/bin/etcd --name=\&amp;quot;${
ETCD_NAME}\&amp;quot; --data-dir=\&amp;quot;${
ETCD_DATA_DIR}\&amp;quot; --listen-client-urls=\&amp;quot;${
ETCD_LISTEN_CLIENT_URLS}\&amp;quot; --listen-peer-urls=\&amp;quot;${
ETCD_LISTEN_PEER_URLS}\&amp;quot; --advertise-client-urls=\&amp;quot;${
ETCD_ADVERTISE_CLIENT_URLS}\&amp;quot; --initial-advertise-peer-urls=\&amp;quot;${
ETCD_INITIAL_ADVERTISE_PEER_URLS}\&amp;quot; --initial-cluster=\&amp;quot;${
ETCD_INITIAL_CLUSTER}\&amp;quot; --initial-cluster-state=\&amp;quot;${
ETCD_INITIAL_CLUSTER_STATE}\&amp;quot;&amp;quot;


Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然我们可以使用别人的rpm包来安装，就有现成的配置文件，我们在上面修改就行了。&lt;/p&gt;

&lt;p&gt;下面我们来来系统启动etcd&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
systemctl enable etcd.service
systemctl start etcd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以检查集群了，有一些需要主要的地方，一个就是服务的用户要有对应目录的权限。&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;p&gt;直接参考官方的md文件。就是正常的key/value类型的数据库的使用方法，类似于redis的使用。&lt;/p&gt;

&lt;h1 id=&#34;flannel&#34;&gt;flannel&lt;/h1&gt;

&lt;h2 id=&#34;安装-1&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;这个和etcd一样，到开源到github上下载一个二进制文件可以直接使用，这个是建立在etcd到基础上使用的。&lt;/p&gt;

&lt;h2 id=&#34;使用-1&#34;&gt;使用&lt;/h2&gt;

&lt;p&gt;首先创建一个配置文件flannel-config.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Network&amp;quot;: &amp;quot;172.17.0.0/16&amp;quot;,
    &amp;quot;SubnetLen&amp;quot;: 24,
    &amp;quot;Backend&amp;quot;: {
        &amp;quot;Type&amp;quot;: &amp;quot;vxlan&amp;quot;,
        &amp;quot;VNI&amp;quot;: 1
     }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先在etcd集群中插入数据，也是flannel启动的时候需要读取的,这个就设定flannel分配ip的地址段。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;etcdctl --no-sync --peers &amp;quot;http://ETCD IP:2379&amp;quot; set /newland.com/network/config &amp;lt; flannel-config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在每个节点分别启动Flannel：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flanneld &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后需要给Docker动一点手脚，修改它的启动参数和docker0地址。&lt;/p&gt;

&lt;p&gt;在每个节点上执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mk-docker-opts.sh -i
source /run/flannel/subnet.env
sudo rm /var/run/docker.pid
sudo ifconfig docker0 ${FLANNEL_SUBNET} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启动一次Docker，这样配置就完成了。&lt;/p&gt;

&lt;p&gt;现在在两个节点分别启动一个Docker容器，它们之间已经通过IP地址直接相互ping通了。&lt;/p&gt;

&lt;p&gt;到此，整个Flannel集群也就正常运行了。&lt;/p&gt;

&lt;p&gt;最后，前面反复提到过Flannel有一个保存在Etcd的路由表，可以在Etcd数据中找到这些路由记录。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>